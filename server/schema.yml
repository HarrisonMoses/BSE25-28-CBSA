openapi: 3.0.3
info:
  title: Soil Monitoring API
  version: 1.0.0
  description: Cloud based soil monitoring system
paths:
  /api/crop/:
    get:
      operationId: api_crop_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Crop'
          description: ''
    post:
      operationId: api_crop_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Crop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Crop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Crop'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crop'
          description: ''
  /api/crop/{crop_id}/:
    get:
      operationId: api_crop_retrieve
      parameters:
      - in: path
        name: crop_id
        schema:
          type: integer
        description: A unique integer value identifying this crop.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crop'
          description: ''
    put:
      operationId: api_crop_update
      parameters:
      - in: path
        name: crop_id
        schema:
          type: integer
        description: A unique integer value identifying this crop.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Crop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Crop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Crop'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crop'
          description: ''
    patch:
      operationId: api_crop_partial_update
      parameters:
      - in: path
        name: crop_id
        schema:
          type: integer
        description: A unique integer value identifying this crop.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCrop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCrop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCrop'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crop'
          description: ''
    delete:
      operationId: api_crop_destroy
      parameters:
      - in: path
        name: crop_id
        schema:
          type: integer
        description: A unique integer value identifying this crop.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/device/:
    get:
      operationId: api_device_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
          description: ''
    post:
      operationId: api_device_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
  /api/device/{device_pk}/data/:
    get:
      operationId: api_device_data_list
      parameters:
      - in: path
        name: device_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorData'
          description: ''
    post:
      operationId: api_device_data_create
      parameters:
      - in: path
        name: device_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SensorData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SensorData'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
          description: ''
  /api/device/{device_pk}/data/{id}/:
    get:
      operationId: api_device_data_retrieve
      parameters:
      - in: path
        name: device_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sensor data.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
          description: ''
    put:
      operationId: api_device_data_update
      parameters:
      - in: path
        name: device_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sensor data.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SensorData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SensorData'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
          description: ''
    patch:
      operationId: api_device_data_partial_update
      parameters:
      - in: path
        name: device_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sensor data.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSensorData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSensorData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSensorData'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
          description: ''
    delete:
      operationId: api_device_data_destroy
      parameters:
      - in: path
        name: device_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sensor data.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/device/{device_id}/:
    get:
      operationId: api_device_retrieve
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    put:
      operationId: api_device_update
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    patch:
      operationId: api_device_partial_update
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    delete:
      operationId: api_device_destroy
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farmer/:
    get:
      operationId: api_farmer_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Farmer'
          description: ''
    post:
      operationId: api_farmer_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farmer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farmer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farmer'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
          description: ''
  /api/farmer/{id}/:
    get:
      operationId: api_farmer_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this farmer.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
          description: ''
    put:
      operationId: api_farmer_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this farmer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farmer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farmer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farmer'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
          description: ''
    patch:
      operationId: api_farmer_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this farmer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarmer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarmer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarmer'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
          description: ''
    delete:
      operationId: api_farmer_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this farmer.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farmer/{id}/me/:
    get:
      operationId: api_farmer_me_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this farmer.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
          description: ''
    put:
      operationId: api_farmer_me_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this farmer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farmer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farmer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farmer'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
          description: ''
  /api/farms/:
    get:
      operationId: api_farms_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Farm'
          description: ''
    post:
      operationId: api_farms_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
  /api/farms/{farms_pk}/crops/:
    get:
      operationId: api_farms_crops_list
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FarmCrop'
          description: ''
    post:
      operationId: api_farms_crops_create
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmCrop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmCrop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmCrop'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmCrop'
          description: ''
  /api/farms/{farms_pk}/crops/{id}/:
    get:
      operationId: api_farms_crops_retrieve
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmCrop'
          description: ''
    put:
      operationId: api_farms_crops_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmCrop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmCrop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmCrop'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmCrop'
          description: ''
    patch:
      operationId: api_farms_crops_partial_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarmCrop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarmCrop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarmCrop'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmCrop'
          description: ''
    delete:
      operationId: api_farms_crops_destroy
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farms/{farms_pk}/data/:
    get:
      operationId: api_farms_data_list
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FarmSensorData'
          description: ''
    post:
      operationId: api_farms_data_create
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmSensorData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmSensorData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmSensorData'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmSensorData'
          description: ''
  /api/farms/{farms_pk}/data/{id}/:
    get:
      operationId: api_farms_data_retrieve
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmSensorData'
          description: ''
    put:
      operationId: api_farms_data_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmSensorData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmSensorData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmSensorData'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmSensorData'
          description: ''
    patch:
      operationId: api_farms_data_partial_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarmSensorData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarmSensorData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarmSensorData'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmSensorData'
          description: ''
    delete:
      operationId: api_farms_data_destroy
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farms/{farms_pk}/devices/:
    get:
      operationId: api_farms_devices_list
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
          description: ''
    post:
      operationId: api_farms_devices_create
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
  /api/farms/{farms_pk}/devices/{device_id}/:
    get:
      operationId: api_farms_devices_retrieve
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    put:
      operationId: api_farms_devices_update
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    patch:
      operationId: api_farms_devices_partial_update
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    delete:
      operationId: api_farms_devices_destroy
      parameters:
      - in: path
        name: device_id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farms/{farms_pk}/farms/:
    get:
      operationId: api_farms_farms_list
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Farm'
          description: ''
    post:
      operationId: api_farms_farms_create
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
  /api/farms/{farms_pk}/farms/{id}/:
    get:
      operationId: api_farms_farms_retrieve
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    put:
      operationId: api_farms_farms_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    patch:
      operationId: api_farms_farms_partial_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarm'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    delete:
      operationId: api_farms_farms_destroy
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farms/{farms_pk}/notification/:
    get:
      operationId: api_farms_notification_list
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FarmNotification'
          description: ''
    post:
      operationId: api_farms_notification_create
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmNotification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmNotification'
          description: ''
  /api/farms/{farms_pk}/notification/{id}/:
    get:
      operationId: api_farms_notification_retrieve
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmNotification'
          description: ''
    put:
      operationId: api_farms_notification_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmNotification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmNotification'
          description: ''
    patch:
      operationId: api_farms_notification_partial_update
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarmNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarmNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarmNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmNotification'
          description: ''
    delete:
      operationId: api_farms_notification_destroy
      parameters:
      - in: path
        name: farms_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/farms/{id}/:
    get:
      operationId: api_farms_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    put:
      operationId: api_farms_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    patch:
      operationId: api_farms_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarm'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    delete:
      operationId: api_farms_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/monitor/{farm_id}/:
    get:
      operationId: api_monitor_retrieve
      parameters:
      - in: path
        name: farm_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/notification/:
    get:
      operationId: api_notification_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserNotification'
          description: ''
    post:
      operationId: api_notification_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserNotification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
          description: ''
  /api/notification/{id}/:
    get:
      operationId: api_notification_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
          description: ''
    put:
      operationId: api_notification_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserNotification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
          description: ''
    patch:
      operationId: api_notification_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
          description: ''
    delete:
      operationId: api_notification_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this notification.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/recommendation/{farm_id}/:
    get:
      operationId: api_recommendation_retrieve
      parameters:
      - in: path
        name: farm_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/users/:
    get:
      operationId: auth_users_list
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatePasswordRetype'
          description: ''
  /auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/users/reset_username/:
    post:
      operationId: auth_users_reset_username_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_username_confirm/:
    post:
      operationId: auth_users_reset_username_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /auth/users/set_username/:
    post:
      operationId: auth_users_set_username_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    Crop:
      type: object
      properties:
        crop_id:
          type: integer
          readOnly: true
        crop:
          type: string
          maxLength: 255
        nitrogen_min_ppm:
          type: number
          format: double
        nitrogen_max_ppm:
          type: number
          format: double
        phosphorous_min_ppm:
          type: number
          format: double
        phosphorous_max_ppm:
          type: number
          format: double
        potassium_min_ppm:
          type: number
          format: double
        potassium_max_ppm:
          type: number
          format: double
        humidity_min:
          type: number
          format: double
          nullable: true
        humidity_max:
          type: number
          format: double
          nullable: true
      required:
      - crop
      - crop_id
      - nitrogen_max_ppm
      - nitrogen_min_ppm
      - phosphorous_max_ppm
      - phosphorous_min_ppm
      - potassium_max_ppm
      - potassium_min_ppm
    Device:
      type: object
      properties:
        device_id:
          type: integer
          readOnly: true
        device_name:
          type: string
          maxLength: 255
        unique_id:
          type: string
          maxLength: 255
        status:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - device_id
      - device_name
      - unique_id
    Farm:
      type: object
      properties:
        farm_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        location:
          type: string
        size:
          type: number
          format: double
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
          readOnly: true
        crops:
          type: array
          items:
            $ref: '#/components/schemas/FarmCrop'
          readOnly: true
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/FarmNotification'
          readOnly: true
      required:
      - created_at
      - crops
      - devices
      - farm_id
      - location
      - name
      - notifications
    FarmCrop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        crop_id:
          type: integer
        crop:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - crop
      - crop_id
      - id
    FarmNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        message:
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        recommendation:
          type: string
          nullable: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        read_at:
          type: string
          format: date-time
          nullable: true
        action_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        user:
          type: integer
        farm:
          type: integer
          nullable: true
      required:
      - created_at
      - id
      - message
      - title
      - user
    FarmSensorData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        moisture_level:
          type: number
          format: double
        temperature:
          type: number
          format: double
        nitrogen:
          type: number
          format: double
        phosphorous:
          type: number
          format: double
        potassium:
          type: number
          format: double
        farm_uuid:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - moisture_level
      - nitrogen
      - phosphorous
      - potassium
      - temperature
    Farmer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        phone:
          type: string
          nullable: true
          maxLength: 15
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - user
    NotificationTypeEnum:
      enum:
      - system
      - farm_alert
      - crop_update
      - weather
      - maintenance
      - market
      - other
      type: string
      description: |-
        * `system` - System Notification
        * `farm_alert` - Farm Alert
        * `crop_update` - Crop Update
        * `weather` - Weather Alert
        * `maintenance` - Maintenance Reminder
        * `market` - Market Update
        * `other` - Other
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedCrop:
      type: object
      properties:
        crop_id:
          type: integer
          readOnly: true
        crop:
          type: string
          maxLength: 255
        nitrogen_min_ppm:
          type: number
          format: double
        nitrogen_max_ppm:
          type: number
          format: double
        phosphorous_min_ppm:
          type: number
          format: double
        phosphorous_max_ppm:
          type: number
          format: double
        potassium_min_ppm:
          type: number
          format: double
        potassium_max_ppm:
          type: number
          format: double
        humidity_min:
          type: number
          format: double
          nullable: true
        humidity_max:
          type: number
          format: double
          nullable: true
    PatchedDevice:
      type: object
      properties:
        device_id:
          type: integer
          readOnly: true
        device_name:
          type: string
          maxLength: 255
        unique_id:
          type: string
          maxLength: 255
        status:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFarm:
      type: object
      properties:
        farm_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        location:
          type: string
        size:
          type: number
          format: double
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
          readOnly: true
        crops:
          type: array
          items:
            $ref: '#/components/schemas/FarmCrop'
          readOnly: true
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/FarmNotification'
          readOnly: true
    PatchedFarmCrop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        crop_id:
          type: integer
        crop:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFarmNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        message:
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        recommendation:
          type: string
          nullable: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        read_at:
          type: string
          format: date-time
          nullable: true
        action_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        user:
          type: integer
        farm:
          type: integer
          nullable: true
    PatchedFarmSensorData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        moisture_level:
          type: number
          format: double
        temperature:
          type: number
          format: double
        nitrogen:
          type: number
          format: double
        phosphorous:
          type: number
          format: double
        potassium:
          type: number
          format: double
        farm_uuid:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFarmer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        phone:
          type: string
          nullable: true
          maxLength: 15
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSensorData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        moisture_level:
          type: number
          format: double
        temperature:
          type: number
          format: double
        nitrogen:
          type: number
          format: double
        phosphorous:
          type: number
          format: double
        potassium:
          type: number
          format: double
        farm_uuid:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          nullable: true
    PatchedUserNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        message:
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        recommendation:
          type: string
          nullable: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        read_at:
          type: string
          format: date-time
          nullable: true
        action_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        user:
          type: integer
        farm:
          type: integer
          nullable: true
    PriorityEnum:
      enum:
      - low
      - medium
      - high
      - critical
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
        * `critical` - Critical
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SensorData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        moisture_level:
          type: number
          format: double
        temperature:
          type: number
          format: double
        nitrogen:
          type: number
          format: double
        phosphorous:
          type: number
          format: double
        potassium:
          type: number
          format: double
        farm_uuid:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - moisture_level
      - nitrogen
      - phosphorous
      - potassium
      - temperature
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          nullable: true
          title: Username
          maxLength: 150
      required:
      - current_password
    StatusEnum:
      enum:
      - A
      - M
      type: string
      description: |-
        * `A` - Active
        * `M` - Maintenance
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 150
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
      required:
      - email
      - id
      - is_active
      - phone
    UserCreatePasswordRetype:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          nullable: true
          maxLength: 150
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
        re_password:
          type: string
      required:
      - email
      - id
      - password
      - re_password
    UserNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        message:
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        recommendation:
          type: string
          nullable: true
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        read_at:
          type: string
          format: date-time
          nullable: true
        action_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        user:
          type: integer
        farm:
          type: integer
          nullable: true
      required:
      - created_at
      - id
      - message
      - title
      - user
    UsernameResetConfirm:
      type: object
      properties:
        new_username:
          type: string
          nullable: true
          title: Username
          maxLength: 150
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "J"
